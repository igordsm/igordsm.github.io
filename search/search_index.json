{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About me Hi, I'm Igor. I'm currently a Teaching Professor at Insper and also an open source software developer. Most of my contributions go to elementary linux , although I also contribute to other projects occasionally. Curriculum Vitae Bachelors and PhD in Computer Science ( University of S\u00e3o Paulo ) under the supervision of profs. Roberto Hirata Jr and Nina Hirata PhD internship (INSA-Rouen) with prof. St\u00e9phane Canu Assistant Teaching Professor in Computer Science and Engineering at Insper A list of academic publications can be found in my Google Scholar profile . Projects Most of my time is currently devoted to teaching and writing educational open source software. Course materials are open and published at Insper's github org . Educational software is published at our second github org . When I'm not involved with teaching I contribute to open source software. I believe that writing software that people use is important both as a learning experience and as way to influence the way we do computing. Open Development course (Pt-BR): students contribute to FLOSS software and experience the contact with the community of people that develop it. elementary : I contribute mainly with Camera, Code and Terminal, but also have minor contributions in other places. (more details) News (2021-12-06) Vala reactive programming - Creating Vala apps that behave like React frontend apps (kinda) Support You can show appreciation of what I'm doing by buying me a coffe and/or following me on twitter at @igor_montagner .","title":"About me"},{"location":"#about-me","text":"Hi, I'm Igor. I'm currently a Teaching Professor at Insper and also an open source software developer. Most of my contributions go to elementary linux , although I also contribute to other projects occasionally.","title":"About me"},{"location":"#curriculum-vitae","text":"Bachelors and PhD in Computer Science ( University of S\u00e3o Paulo ) under the supervision of profs. Roberto Hirata Jr and Nina Hirata PhD internship (INSA-Rouen) with prof. St\u00e9phane Canu Assistant Teaching Professor in Computer Science and Engineering at Insper A list of academic publications can be found in my Google Scholar profile .","title":"Curriculum Vitae"},{"location":"#projects","text":"Most of my time is currently devoted to teaching and writing educational open source software. Course materials are open and published at Insper's github org . Educational software is published at our second github org . When I'm not involved with teaching I contribute to open source software. I believe that writing software that people use is important both as a learning experience and as way to influence the way we do computing. Open Development course (Pt-BR): students contribute to FLOSS software and experience the contact with the community of people that develop it. elementary : I contribute mainly with Camera, Code and Terminal, but also have minor contributions in other places. (more details)","title":"Projects"},{"location":"#news","text":"(2021-12-06) Vala reactive programming - Creating Vala apps that behave like React frontend apps (kinda)","title":"News"},{"location":"#support","text":"You can show appreciation of what I'm doing by buying me a coffe and/or following me on twitter at @igor_montagner .","title":"Support"},{"location":"elementary/","text":"elementary OS Camera I've worked with the gstreamer rewrite of the camera backend, adding support for multiple cameras and taking full resolution images. I also added simple image controls such as brightness, contrast and mirror. Accepted Pull Requests Take full resolution pictures When no camera is present show view and disable all controls Add audio recording elements to record_bin Send notification when recording has finished Add brightness and contrast adjustments Add option to mirror the webcam image Add option to switch cameras Use gst.DeviceMonitor to list video sources Setting v4l device now works correctly Code My most noteworthy contributions to Code are the Markdown plugin and (in progress) Snippets plugin and Word completion rewrite . Works in progress Rewrite word completion to play nice with other completion providers Snippets plugin: initial version Accepted Pull Requests Ctrl+Tab for next document and Ctrl+Shift+Tab for previous one Add Markdown plugin List Edit Mode for Markdown Rename tabs with the same title Opens newly created file Fix crash when creating new window from tab drop Update ChooseProjectButton when a project is closed Change setting to Visible whitespace Distinguish projects with same folder name Terminal I do random bug fixes in Terminal. I haven't tackled a more focused project yet. Works in Progress Focus current tab Show zoom level in the center of terminal Accepted Pull Requests Add text to paste in details pane for UnsafePasteDialog Paste Protection dialog cancels pasting if Escape is pressed Add Reload item to terminal tabs","title":"elementary OS"},{"location":"elementary/#elementary-os","text":"","title":"elementary OS"},{"location":"elementary/#camera","text":"I've worked with the gstreamer rewrite of the camera backend, adding support for multiple cameras and taking full resolution images. I also added simple image controls such as brightness, contrast and mirror.","title":"Camera"},{"location":"elementary/#accepted-pull-requests","text":"Take full resolution pictures When no camera is present show view and disable all controls Add audio recording elements to record_bin Send notification when recording has finished Add brightness and contrast adjustments Add option to mirror the webcam image Add option to switch cameras Use gst.DeviceMonitor to list video sources Setting v4l device now works correctly","title":"Accepted Pull Requests"},{"location":"elementary/#code","text":"My most noteworthy contributions to Code are the Markdown plugin and (in progress) Snippets plugin and Word completion rewrite .","title":"Code"},{"location":"elementary/#works-in-progress","text":"Rewrite word completion to play nice with other completion providers Snippets plugin: initial version","title":"Works in progress"},{"location":"elementary/#accepted-pull-requests_1","text":"Ctrl+Tab for next document and Ctrl+Shift+Tab for previous one Add Markdown plugin List Edit Mode for Markdown Rename tabs with the same title Opens newly created file Fix crash when creating new window from tab drop Update ChooseProjectButton when a project is closed Change setting to Visible whitespace Distinguish projects with same folder name","title":"Accepted Pull Requests"},{"location":"elementary/#terminal","text":"I do random bug fixes in Terminal. I haven't tackled a more focused project yet.","title":"Terminal"},{"location":"elementary/#works-in-progress_1","text":"Focus current tab Show zoom level in the center of terminal","title":"Works in Progress"},{"location":"elementary/#accepted-pull-requests_2","text":"Add text to paste in details pane for UnsafePasteDialog Paste Protection dialog cancels pasting if Escape is pressed Add Reload item to terminal tabs","title":"Accepted Pull Requests"},{"location":"other-floss/","text":"Other projects I also occasionally contribute to other FLOSS software I use in a daily basis. Here's a list of these contributions: Focalboard [GH-1167] Add build info to version tooltip [GH 483] Linux-app: discover executable folder and use it in config instead of ./","title":"Other projects"},{"location":"other-floss/#other-projects","text":"I also occasionally contribute to other FLOSS software I use in a daily basis. Here's a list of these contributions:","title":"Other projects"},{"location":"other-floss/#focalboard","text":"[GH-1167] Add build info to version tooltip [GH 483] Linux-app: discover executable folder and use it in config instead of ./","title":"Focalboard"},{"location":"talks/","text":"Talks Here's a list of some talks I gave in the last years. How to contribute to elementary Experi\u00eancias mentorando contribui\u00e7\u00f5es a software livre na faculdade Entenda porque fazer faculdade ainda vale a pena","title":"Talks"},{"location":"talks/#talks","text":"Here's a list of some talks I gave in the last years.","title":"Talks"},{"location":"talks/#how-to-contribute-to-elementary","text":"","title":"How to contribute to elementary"},{"location":"talks/#experiencias-mentorando-contribuicoes-a-software-livre-na-faculdade","text":"","title":"Experi\u00eancias mentorando contribui\u00e7\u00f5es a software livre na faculdade"},{"location":"talks/#entenda-porque-fazer-faculdade-ainda-vale-a-pena","text":"","title":"Entenda porque fazer faculdade ainda vale a pena"},{"location":"blog/2021-12-06/","text":"Vala reactive programming I've been doing some web programming using preact these last weeks and one of the things that impressed the most was the way logic and UI are split in code. When doing functional components this is specially explicit. Your function returns whatever should be displayed by the component and receives a props object contaning all the information the components need to render. A component rerenders when some of its props are changed, either because an external component made changes or in response to an event. IMHO, this really helps to organize code and separate concerns. All the logic is written in terms of the components' properties. The GUI is updated in response to changes in the properties in order to synchronize the component state with what is shown on screen. We can also achieve this in Vala using properties and bindings from GLib. In this article we will produce a login screen that validates the username and password fields. All code is available at Github . Important : The repo contains many iterations of the code presented in this article. A comment containing the name of the original file is shown at the top of each code listing. Let's start with the basic code to build the form above. This is just standard GTK code: all the ui elements are created in the construct method. The original file ( v1/main.vala ) also contains a Gtk.Application subclass that handles initialization and showing our form. Vala tip : the construct block runs during an object's creation and after named constructors are called. // excerpt from v1.vala class LoginForm : Gtk.Grid { // ...... construct { width_request = 300; margin = 10; column_homogeneous = false; expand = false; valign = Gtk.Align.CENTER; halign = Gtk.Align.CENTER; var username_field = new Gtk.Entry () { hexpand = true, margin = 4 }; var password_field = new Gtk.Entry () { hexpand = true, margin = 4 }; var validation_warning = new Gtk.Label (\"\") { wrap = true, height_request = 50 }; var login_btn = new Gtk.Button.with_label (\"Login\") { expand = false, halign = Gtk.Align.END }; attach (new Gtk.Label (\"Username\"), 0, 0); attach (username_field, 1, 0); attach (password_field, 1, 1); attach (new Gtk.Label (\"Password\"), 0, 1); attach (validation_warning, 1, 2); attach (login_btn, 1, 3); show_all (); } } There's no interactivity in this form yet. In fact, it already starts in an inconsistent state: the Login button is enabled even though block fields are empty. We could fix this simply by setting sensitive=false in login_btn initialization, but we won't. Instead we will create a property called is_valid and bind its value to login_btn.sensitive . Every time one of the values change the other is instantly updated. Bindings can also be created with many values as long as a cicle is not introduced. Let's use this now in our program: first we create a property is_valid and then we use bind_property to bind its value to login_btn.sensitive . Our binding flags indicate that the binding is bidirectional and that the value is synchronized when the binding is created . // excerpt from v2.vala class LoginForm : Gtk.Grid { public bool is_valid { get; set; default = false; } construct { // GUI creation code bind_property (\"is_valid\", login_btn, \"sensitive\", BindingFlags.BIDIRECTIONAL | BindingFlags.SYNC_CREATE); } Now the login button is disabled when the app starts and will remain so until we set is_valid=true . Unfortunately this never happens, so let's add a property username and bind it to username_field.text . When username is set we check if its length is larger than 0 and set is_valid accordingly. // excerpt from v3.vala class LoginForm : Gtk.Grid { public bool is_valid { get; set; default = false; } private string _username = \"\"; public string username { get { return _username; } set { _username = value; if (value.length > 0) { is_valid = true; } else { is_valid = false; } }} construct { // GUI creation code bind_property (\"is_valid\", login_btn, \"sensitive\", BindingFlags.BIDIRECTIONAL | BindingFlags.SYNC_CREATE); bind_property (\"username\", username_field, \"text\", BindingFlags.BIDIRECTIONAL | BindingFlags.SYNC_CREATE); } Run the app and test the new validation: the login button should be disable when the app starts and respond to is_valid . IMHO, the impressive part of this code is that all GUI code is on construct and our logic is written only in terms of properties. When we update the Widget's properties the UI will update in response, so our application state is always consistent. Now the final step is to set validation_error to a meaningful message. We can do this with another property binding. To make code more readble we also refactor all our validation code into a function void validate_form () . // excerpt from v4.vala class LoginForm : Gtk.Grid { public string validation_error { get; set; default = \"\"; } public string username { get { return _username; } set { _username = value; validate_form (); } } //.... construct { // .... bind_property (\"validation_error\", validation_warning, \"label\", BindingFlags.DEFAULT | BindingFlags.SYNC_CREATE); } private void validate_form () { if (_username.length == 0) { is_valid = false; validation_error = \"Empty username\"; return; } is_valid = true; validation_error = \"\"; } And that's it for the username field. We can do exactly the same for the password field and arrive at the final code available at final.vala in the example repository .","title":"Vala reactive programming"},{"location":"blog/2021-12-06/#vala-reactive-programming","text":"I've been doing some web programming using preact these last weeks and one of the things that impressed the most was the way logic and UI are split in code. When doing functional components this is specially explicit. Your function returns whatever should be displayed by the component and receives a props object contaning all the information the components need to render. A component rerenders when some of its props are changed, either because an external component made changes or in response to an event. IMHO, this really helps to organize code and separate concerns. All the logic is written in terms of the components' properties. The GUI is updated in response to changes in the properties in order to synchronize the component state with what is shown on screen. We can also achieve this in Vala using properties and bindings from GLib. In this article we will produce a login screen that validates the username and password fields. All code is available at Github . Important : The repo contains many iterations of the code presented in this article. A comment containing the name of the original file is shown at the top of each code listing. Let's start with the basic code to build the form above. This is just standard GTK code: all the ui elements are created in the construct method. The original file ( v1/main.vala ) also contains a Gtk.Application subclass that handles initialization and showing our form. Vala tip : the construct block runs during an object's creation and after named constructors are called. // excerpt from v1.vala class LoginForm : Gtk.Grid { // ...... construct { width_request = 300; margin = 10; column_homogeneous = false; expand = false; valign = Gtk.Align.CENTER; halign = Gtk.Align.CENTER; var username_field = new Gtk.Entry () { hexpand = true, margin = 4 }; var password_field = new Gtk.Entry () { hexpand = true, margin = 4 }; var validation_warning = new Gtk.Label (\"\") { wrap = true, height_request = 50 }; var login_btn = new Gtk.Button.with_label (\"Login\") { expand = false, halign = Gtk.Align.END }; attach (new Gtk.Label (\"Username\"), 0, 0); attach (username_field, 1, 0); attach (password_field, 1, 1); attach (new Gtk.Label (\"Password\"), 0, 1); attach (validation_warning, 1, 2); attach (login_btn, 1, 3); show_all (); } } There's no interactivity in this form yet. In fact, it already starts in an inconsistent state: the Login button is enabled even though block fields are empty. We could fix this simply by setting sensitive=false in login_btn initialization, but we won't. Instead we will create a property called is_valid and bind its value to login_btn.sensitive . Every time one of the values change the other is instantly updated. Bindings can also be created with many values as long as a cicle is not introduced. Let's use this now in our program: first we create a property is_valid and then we use bind_property to bind its value to login_btn.sensitive . Our binding flags indicate that the binding is bidirectional and that the value is synchronized when the binding is created . // excerpt from v2.vala class LoginForm : Gtk.Grid { public bool is_valid { get; set; default = false; } construct { // GUI creation code bind_property (\"is_valid\", login_btn, \"sensitive\", BindingFlags.BIDIRECTIONAL | BindingFlags.SYNC_CREATE); } Now the login button is disabled when the app starts and will remain so until we set is_valid=true . Unfortunately this never happens, so let's add a property username and bind it to username_field.text . When username is set we check if its length is larger than 0 and set is_valid accordingly. // excerpt from v3.vala class LoginForm : Gtk.Grid { public bool is_valid { get; set; default = false; } private string _username = \"\"; public string username { get { return _username; } set { _username = value; if (value.length > 0) { is_valid = true; } else { is_valid = false; } }} construct { // GUI creation code bind_property (\"is_valid\", login_btn, \"sensitive\", BindingFlags.BIDIRECTIONAL | BindingFlags.SYNC_CREATE); bind_property (\"username\", username_field, \"text\", BindingFlags.BIDIRECTIONAL | BindingFlags.SYNC_CREATE); } Run the app and test the new validation: the login button should be disable when the app starts and respond to is_valid . IMHO, the impressive part of this code is that all GUI code is on construct and our logic is written only in terms of properties. When we update the Widget's properties the UI will update in response, so our application state is always consistent. Now the final step is to set validation_error to a meaningful message. We can do this with another property binding. To make code more readble we also refactor all our validation code into a function void validate_form () . // excerpt from v4.vala class LoginForm : Gtk.Grid { public string validation_error { get; set; default = \"\"; } public string username { get { return _username; } set { _username = value; validate_form (); } } //.... construct { // .... bind_property (\"validation_error\", validation_warning, \"label\", BindingFlags.DEFAULT | BindingFlags.SYNC_CREATE); } private void validate_form () { if (_username.length == 0) { is_valid = false; validation_error = \"Empty username\"; return; } is_valid = true; validation_error = \"\"; } And that's it for the username field. We can do exactly the same for the password field and arrive at the final code available at final.vala in the example repository .","title":"Vala reactive programming"}]}